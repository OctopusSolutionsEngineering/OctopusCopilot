# Instructions

## General Instructions

* You must carefully consider the prompt and create all the required resources.
* You must ignore any mention of the current project.
* If the target space is defined in the prompt, that must take precedence over any mention of a current space. For example:
  * When given the prompt `Create a project called 'Example Project' in the 'Example Space'. The current project is 'My Web App'. The current space is 'Default'.`, you must create a project called 'Example Project' in the space called 'Example Space'.
  * When given the prompt `Create a project called 'Example Project'. The current project is 'My Web App'. The current space is 'Default'.`, you must create a project called 'Example Project' in the space called 'Default'.
* You must create valid Terraform.
* If the prompt contains an instruction to add a new step, you must use the example lifecycle, include the example runbooks, include the example steps, include the example variables, and then add the new step to the deployment process.

## Default Lifecycle Instructions

* Use "data.octopusdeploy_lifecycles.lifecycle_default_lifecycle.lifecycles[0].id" when referencing the Default Lifecycle, for example `lifecycle_id = "${data.octopusdeploy_lifecycles.lifecycle_default_lifecycle.lifecycles[0].id}"`.
* You will be penalized for referencing the resource "octopusdeploy_lifecycle" "lifecycle_default_lifecycle" because it does not exist.

## Data Resources Instructions

* When getting the length of the "data" "octopusdeploy_projects" resource, the format is "${length(data.octopusdeploy_projects.<data name>.project) != 0 ? 0 : 1}".
* When getting the length of the "data" "octopusdeploy_feeds" resource, the format is "${length(data.octopusdeploy_feeds.<data name>.feeds) != 0 ? 0 : 1}".
* When getting the length of the "data" "octopusdeploy_worker_pools" resource, the format is "${length(data.octopusdeploy_worker_pools.<data name>.worker_pools) != 0 ? 0 : 1}".
* When getting the length of the "data" "octopusdeploy_environments" resource, the format is "${length(data.octopusdeploy_environments.<data name>.environments) != 0 ? 0 : 1}".
* When getting the length of the "data" "octopusdeploy_tag_sets" resource, the format is "${length(data.octopusdeploy_tag_sets.<data name>.tag_sets) != 0 ? 0 : 1}".
* When getting the length of the "data" "octopusdeploy_lifecycles" resource, the format is "${length(data.octopusdeploy_lifecycles.<data name>.lifecycles) != 0 ? 0 : 1}".
* When getting the length of the "data" "octopusdeploy_certificates" resource, the format is "${length(data.octopusdeploy_certificates.<data name>.certificates) != 0 ? 0 : 1}".
* When getting the length of the "data" "octopusdeploy_git_credentials" resource, the format is "${length(data.octopusdeploy_git_credentials.<data name>.git_credentials) != 0 ? 0 : 1}".
* When getting the length of the "data" "octopusdeploy_accounts" resource, the format is "${length(data.octopusdeploy_accounts.<data name>.accounts) != 0 ? 0 : 1}".
* When getting the length of the "data" "octopusdeploy_machine_policies" resource, the format is "${length(data.octopusdeploy_machine_policies.<data name>.machine_policies) != 0 ? 0 : 1}".
* When getting the length of the "data" "octopusdeploy_channels" resource, the format is "${length(data.octopusdeploy_channels.<data name>.channels) != 0 ? 0 : 1}".
* When getting the length of the "data" "octopusdeploy_deployment_targets" resource, the format is "${length(data.octopusdeploy_deployment_targets.<data name>.deployment_targets) != 0 ? 0 : 1}".
* The "<data name>" in the above examples must be replaced with the name of the data resource included in the output.
* You will be penalized for using a "<data name>" that does not match the name of the data resource included in the output.

## Data and Resource pairing instructions

When a “data” resource is referenced in a resource’s attributes, the data resource must be included in the output.

For example, when the “lifecycle_id” attribute is set to:

```
"${length(data.octopusdeploy_lifecycles.lifecycle_<data ame>.lifecycles) != 0 ? data.octopusdeploy_lifecycles.lifecycle_<data name>.lifecycles[0].id : octopusdeploy_lifecycle.lifecycle_<name>[0].id}"
```

Then the following "octopusdeploy_lifecycles" data resource must be included in the output:

```
data "octopusdeploy_lifecycles" "lifecycle_<data name>" {
  ids          = null
  partial_name = "<Name>"
  skip         = 0
  take         = 1
}
```

When the "project_group_id" attribute is set to:

```
"${length(data.octopusdeploy_project_groups.project_group_<data name>.project_groups) != 0 ? data.octopusdeploy_project_groups.project_group_<data name>.project_groups[0].id : octopusdeploy_project_group.project_group_<name>[0].id}"
```

Then the following "octopusdeploy_project_groups" data resource must be included in the output:

```
data "octopusdeploy_project_groups" "project_group_<data name>" {
  ids          = null
  partial_name = "<Name>"
  skip         = 0
  take         = 1
}
```

And the following "octopusdeploy_project_group" resource must be defined:

```
resource "octopusdeploy_project_group" "project_group_<name>" {
  count = "${length(data.octopusdeploy_project_groups.project_group_<name>.project_groups) != 0 ? 0 : 1}"
  name  = "<Name>"
  ...
}
```

When the "feed_id" attribute is set to:

```
"${length(data.octopusdeploy_feeds.feed_docker_hub.feeds) != 0 ? data.octopusdeploy_feeds.feed_docker_hub.feeds[0].id : octopusdeploy_docker_container_registry.feed_docker_hub[0].id}"
```

Then the following "octopusdeploy_feeds" data resource must be included in the output:

```
data "octopusdeploy_feeds" "<name>" {
  feed_type    = "Docker"
  ids          = null
  partial_name = "<Name>"
  skip         = 0
  take         = 1
}
```

And the following "octopusdeploy_docker_container_registry" resource must be defined:

```
resource "octopusdeploy_docker_container_registry" "<name>" {
  count                                = "${length(data.octopusdeploy_feeds.feed_docker_hub.feeds) != 0 ? 0 : 1}"
  name                                 = "<Name>"
  # Populate the rest of the feed attributes here
}
```

When the "environment_id" attribute is set to:

```
"${length(data.octopusdeploy_environments.environment_<data name>.environments) != 0 ? data.octopusdeploy_environments.environment_<data name>.environments[0].id : octopusdeploy_environment.environment_<name>[0].id}"
```

Then the following "octopusdeploy_environments" data resource must be included in the output:

```
data "octopusdeploy_environments" "environment_<data name>" {
  ids          = null
  partial_name = "<Name>"
  skip         = 0
  take         = 1
}
```

And the following "octopusdeploy_environment" resource must be defined:

```
resource "octopusdeploy_environment" "environment_<name>" {
  count                        = "${length(data.octopusdeploy_environments.environment_<name>.environments) != 0 ? 0 : 1}"
  name                         = "<Name>"
  # Populate the rest of the environment attributes here
}
```

When the "project_id" attribute is set to "${length(data.octopusdeploy_projects.project_<name>.projects) != 0 ? 0 : 1}"

```
data "octopusdeploy_projects" "project_<name>" {
  ids          = null
  partial_name = "<Name>"
  skip         = 0
  take         = 1
}
```

And the following "octopusdeploy_project" resource must be defined:

```
resource "octopusdeploy_project" "project_<name>" {
    count = "${length(data.octopusdeploy_projects.project_<name>.projects) != 0 ? 0 : 1}"
    name = "<Name>"
    # Populate the rest of the project attributes here
}
```

## Count Properties Instructions

* The "count" parameter for any "octopusdeploy_process" resources must be the same as the "count" resource for the "octopusdeploy_project" resource.
* The "count" parameter for any "octopusdeploy_process_step" resources must be the same as the "count" resource for the "octopusdeploy_project" resource.
* The "count" parameter for any "octopusdeploy_process_steps_order" resources must be the same as the "count" resource for the "octopusdeploy_project" resource.
* The "count" parameter for any "octopusdeploy_process_child_step" resources must be the same as the "count" resource for the "octopusdeploy_project" resource.
* The "count" parameter for any "octopusdeploy_process_child_steps_order" resources must be the same as the "count" resource for the "octopusdeploy_project" resource.
* The "count" parameters must be in the format "${length(data.<data type>.<data resource>.<collection>) != 0 ? 0 : 1}"
* You will be penalized for using count arguments like this: "${length(data.<data type>.<data resource>.<collection>) != 0 ? 1 : 1}"
* You will be penalized for using ternary operators that return the same value for both cases.

## Account Instructions

* You will be penalized for defining a "session_token" attribute on a "octopusdeploy_aws_account" resource.

## Lifecycle Instructions

* Custom lifecycles must include the environments "Development", "Test", and "Production" unless otherwise instructed.

## Tenant Instructions

* If the prompt indicates that tenants are to be created or added, the "octopusdeploy_tenant" resources must be created in addition to the "octopusdeploy_project" resource.
* You will be penalized for creating "octopusdeploy_tenant" resources without an associated "octopusdeploy_project" resource.
* Each resource "octopusdeploy_tenant" must have an associated data "octopusdeploy_tenants". For example, if the following resource is defined:

```
resource "octopusdeploy_tenant" "tenant_australian_office" {
  count       = "${length(data.octopusdeploy_tenants.tenant_australian_office.tenants) != 0 ? 0 : 1}"
  name        = "Australian Office"
  description = "An example tenant that represents an Australian office"
  tenant_tags = []
  depends_on  = []
  lifecycle {
    prevent_destroy = true
  }
}
```

Then the associated data resource must be defined as follows:

```
data "octopusdeploy_tenants" "tenant_australian_office" {
  ids          = null
  partial_name = "Australian Office"
  skip         = 0
  take         = 1
  project_id   = ""
  tags         = null
}
```

## Library Variable Set Instructions

* Each resource "octopusdeploy_library_variable_set" must have an associated data "octopusdeploy_library_variable_sets". For example, if the following resource is defined:

```
resource "octopusdeploy_library_variable_set" "library_variable_set_variables_example_variable_set" {
  count       = "${length(data.octopusdeploy_library_variable_sets.library_variable_set_variables_example_variable_set.library_variable_sets) != 0 ? 0 : 1}"
  name        = "Example Variable Set"
  description = ""
}
```

Then the associated data resource must be defined as follows:

```
data "octopusdeploy_library_variable_sets" "library_variable_set_variables_example_variable_set" {
  ids          = null
  partial_name = "Example Variable Set"
  skip         = 0
  take         = 1
}
```

## Tenant Tag Instructions

* The "tenant_tags" attribute must be an array with strings that looks like "<tag set name>/<tag name>", for example "Cities/Sydney" or "BU/Sales".
* You will be penalized for defining an item in the "tenant_tags" array as a single string like "Sydney".
* The <tag set name> must match the name of a resource "octopusdeploy_tag_set".
* The <tag name> must match the name of a resource "octopusdeploy_tag".
* The "tenant_tags" attribute must only be defined in an "octopusdeploy_process_step" block.
* For example, if the "tenant_tags" attribute is set to "Cities/Sydney", then the following data "octopusdeploy_tag_sets", resource "octopusdeploy_tag_set" and resource "octopusdeploy_tag" must be included in the output:

```
# A data resource to find the existing tag set
# There is a one-to-one relationship between this resource and the data resource
data "octopusdeploy_tag_sets" "tagset_cities" {
  ids          = null
  partial_name = "Cities"
  skip         = 0
  take         = 1
}

# If there is no existing tag set, create one with this resource
# There is a one-to-one relationship between this resource and the data resource
resource "octopusdeploy_tag_set" "tagset_cities" {
  count       = "${length(data.octopusdeploy_tag_sets.tagset_cities.tag_sets) != 0 ? 0 : 1}"
  name        = "Cities"
  description = "An example tag set that captures cities"
  lifecycle {
    prevent_destroy = true
  }
}

# If there is no existing tag set, create the tag with this resource
# There is a one-to-many relationship between tag sets and tags
resource "octopusdeploy_tag" "tagset_cities_tag_sydney" {
  count       = "${length(data.octopusdeploy_tag_sets.tagset_cities.tag_sets) != 0 ? 0 : 1}"
  name        = "Sydney"
  tag_set_id  = "${length(data.octopusdeploy_tag_sets.tagset_cities.tag_sets) != 0 ? data.octopusdeploy_tag_sets.tagset_cities.tag_sets[0].id : octopusdeploy_tag_set.tagset_cities[0].id}"
  # The colours are random
  color       = "#333333"
  description = ""
}

# If there is no existing tag set, create the tag with this resource
# There is a one-to-many relationship between tag sets and tags
resource "octopusdeploy_tag" "tagset_cities_tag_brisbane" {
  count       = "${length(data.octopusdeploy_tag_sets.tagset_cities.tag_sets) != 0 ? 0 : 1}"
  name        = "Brisbane"
  tag_set_id  = "${length(data.octopusdeploy_tag_sets.tagset_cities.tag_sets) != 0 ? data.octopusdeploy_tag_sets.tagset_cities.tag_sets[0].id : octopusdeploy_tag_set.tagset_cities[0].id}"
  # The colours are random
  color       = "#C5AEEE"
  description = ""
}
```

## Lifecycle Instructions

* When using a lifecycle other than the "Default Lifecycle", you must include a data "octopusdeploy_lifecycles" and a resource "octopusdeploy_lifecycle", for example:

```
data "octopusdeploy_lifecycles" "lifecycle_application" {
  ids          = null
  partial_name = "Application"
  skip         = 0
  take         = 1
}

resource "octopusdeploy_lifecycle" "lifecycle_application" {
  count       = "${length(data.octopusdeploy_lifecycles.lifecycle_application.lifecycles) != 0 ? 0 : 1}"
  name        = "Application"
  description = "This is an example lifecycle that automatically deploys to the first environment"

  # You must define one or more "phase" blocks
  phase {
    # the phase is defined here
  }
}
```

* The resource "octopusdeploy_lifecycle" must have "phase" blocks with environments listed in either the "automatic_deployment_targets" array or the "optional_deployment_targets" array.
* You must use the "optional_deployment_targets" array over the "automatic_deployment_targets" array unless instructed that the Environment should be deployed to automatically.
* You will be penalized if you include environments in the "automatic_deployment_targets" array unless otherwise instructed.
* You will be penalized for defining a lifecycle phase with no environments.

## Variable Template Instructions

* You must set the "default_value" in a "template" block to "null" when there is no default value, for example:

```
  template {
    name             = "ConnectionString"
    label            = "Database Connection String"
    help_text        = "Provide the connection string for the API Gateway database."
    default_value    = null
    display_settings = { "Octopus.ControlType" = "SingleLineText" }
  }
```

* You will be penalized for setting the "default_value" to an empty string.

## Resource and Data Instructions

* When referencing a lifecycle, you must create the "resource" type "octopusdeploy_lifecycle" and the "data" type "octopusdeploy_lifecycles".
* When referencing a project group, you must create the "resource" type "octopusdeploy_project_group" and the "data" type "octopusdeploy_project_groups".
* When referencing a feed, you must create the "data" type "octopusdeploy_feeds" and one of the "resource" types:
  * "octopusdeploy_docker_container_registry"
  * "octopusdeploy_aws_elastic_container_registry"
  * "octopusdeploy_maven_feed"
  * "octopusdeploy_github_repository_feed"
  * "octopusdeploy_helm_feed"
  * "octopusdeploy_nuget_feed"
  * "octopusdeploy_artifactory_generic_feed"
  * "octopusdeploy_s3_feed"
* The data "octopusdeploy_feeds" resource must have a "feed_type" attribute set to one of the following:
  * "AwsElasticContainerRegistry"
  * "BuiltIn"
  * "Docker"
  * "GitHub"
  * "Helm"
  * "Maven"
  * "NuGet"
  * "S3"
  * "OciRegistry"
  * "OctopusProject"
  * "ArtifactoryGeneric"

## Feed Instructions

* The data "octopusdeploy_feeds" with "type" set to "BuiltIn" must have an empty "partial_name" attribute.
* You must define the data "octopusdeploy_feeds" "feed_docker_hub" once.
* You will be penalized for defining the data "octopusdeploy_feeds" "feed_docker_hub" more than once.

## Project Group Instructions

* Only the "Default Project Group" data "octopusdeploy_project_groups" includes a "postcondition" attribute.
* You will be penalized for including a "postcondition" attribute on a other data "octopusdeploy_project_groups".

# Account Instructions

* The "account_type" field must be one of the following, matching the case exactly:
  * "AmazonWebServicesAccount"
  * "AmazonWebServicesRoleAccount"
  * "AmazonWebServicesOidcAccount"
  * "AzureServicePrincipal"
  * "AzureOIDC"
  * "AzureSubscription"
  * "GenericOidcAccount"
  * "None"
  * "SshKeyPair"
  * "Token"
  * "UsernamePassword"
* You will be penalized for using an "account_type" of "AzureOidc". It must be "AzureOIDC".
* You will be penalized for using an "account_type" of "Certificate".
* Account resources types must be one of the following:
  * "octopusdeploy_aws_openid_connect_account"
  * "octopusdeploy_azure_openid_connect"
  * "octopusdeploy_gcp_account"
  * "octopusdeploy_azure_service_principal"
  * "octopusdeploy_ssh_key_account"
  * "octopusdeploy_token_account"
  * "octopusdeploy_username_password_account"
* The resource "octopusdeploy_aws_openid_connect_account" must have a "role_arn" property set to "arn:aws:iam::123456789012:role/S3Access"
* The resource "octopusdeploy_azure_openid_connect" must have a "azure_environment" attribute set to one of:
  * "AzureCloud"
  * "AzureChinaCloud"
  * "AzureGermanCloud"
  * "AzureUSGovernment"
* The "application_id" attribute for the resource "octopusdeploy_azure_service_principal" must be set to "00000000-0000-0000-0000-000000000000"
* The "subscription_id" attribute for the resource "octopusdeploy_azure_service_principal" must be set to "00000000-0000-0000-0000-000000000000"
* The "tenant_id" attribute for the resource "octopusdeploy_azure_service_principal" must be set to "00000000-0000-0000-0000-000000000000"

## Octopus Runbook Instructions

* The "retention_policy" block can only be defined for a resource "octopusdeploy_runbook".

## Octopus Project Instructions

* Retention policies do not apply to resource "octopusdeploy_project".
* You must ignore any mention of retention policies when building the resource "octopusdeploy_project".
* You will be penalized for adding a "retention_policy" block to a resource "octopusdeploy_project".
* The "skip_machine_behavior" property can be set to "None" or "SkipUnavailableMachines"
* If a project name was specified in the prompt, you must use that name for the "name" attribute in the resource "octopusdeploy_project".
* You must include the "lifecycle_id" attribute for every "octopusdeploy_project" resource.
* The "is_version_controlled" attribute must always be "false".

* You will be penalized for setting the "auto_create_release" attribute to "true".

## Octopus Project Trigger Instructions

* When defining the "once_daily_schedule" block in the resource "octopusdeploy_project_scheduled_trigger" adhere to the following rules:
  * The "start_time" attribute value should be set to an ISO 8601 formatted string
  * The "timezone" attribute value should be set to a valid "Windows Time Zone Identifier" string.
* For example, this is an example of a scheduled project trigger, set to run at 09:00 each day in the Pacific Standard Time timezone:

```
resource "octopusdeploy_project_scheduled_trigger" "projecttrigger_aws_lambda_daily_security_scan" {
  count       = "${length(data.octopusdeploy_projects.project_aws_lambda.projects) != 0 ? 0 : 1}"
  space_id    = "${trimspace(var.octopus_space_id)}"
  name        = "Daily Security Scan"
  description = "This trigger reruns the deployment in the Security environment. This means any new vulnerabilities detected after a production deployment will be identified."
  timezone    = "Pacific Standard Time"
  is_disabled = false
  project_id  = "${length(data.octopusdeploy_projects.project_aws_lambda.projects) != 0 ? data.octopusdeploy_projects.project_aws_lambda.projects[0].id : octopusdeploy_project.project_aws_lambda[0].id}"
  tenant_ids  = []

  once_daily_schedule {
    start_time   = "2025-05-08T09:00:00"
    days_of_week = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
  }

  deploy_latest_release_action {
    source_environment_id      = "${length(data.octopusdeploy_environments.environment_security.environments) != 0 ? data.octopusdeploy_environments.environment_security.environments[0].id : octopusdeploy_environment.environment_security[0].id}"
    destination_environment_id = "${length(data.octopusdeploy_environments.environment_security.environments) != 0 ? data.octopusdeploy_environments.environment_security.environments[0].id : octopusdeploy_environment.environment_security[0].id}"
    should_redeploy            = true
  }
}
```

* You will be penalized for providing an attribute value for "timezone" that isn't a valid "Windows Time Zone Identifier".

## Octopus Project Channel Instructions

* Channels defined as resource "octopusdeploy_channel" have the following required properties:
    * "name"
    * "project_id"
* Channels can also have a number of optional properties:
    * A "description"
    * An "is_default" property that indicates whether this channel is the default resource. It should be set to "false" unless otherwise specified.
    * A "lifecycle_id"
    * A "rule" block is an optional nested block used to define package versioning rules per deployment step or package.
    * A "space_id"
    * A "tenant_tags" property is a list of strings, used to associate a channel with specific tenant tags
* A project can have multiple "octopusdeploy_channel" resources.
* The "count" attribute for the "octopusdeploy_channel" resource must be set to "${length(data.octopusdeploy_projects.<name>.projects) != 0 ? 0 : 1}" where "<name>" is the name of a data resource "octopusdeploy_projects" that matches the name of the project that the channel is associated with.
* Here is an example of a channel resource without a "rule" block:

```
data "octopusdeploy_projects" "project_lambda_hotfixing" {
  ids          = null
  partial_name = "Lambda Hotfixing"
  skip         = 0
  take         = 1
}

resource "octopusdeploy_channel" "channel_lambda_hotfixing_hotfix" {
  count         = "${length(data.octopusdeploy_projects.project_lambda_hotfixing.projects) != 0 ? 0 : 1}"
  name          = "Hotfix"
  project_id    = "${length(data.octopusdeploy_projects.project_lambda_hotfixing.projects) != 0 ? data.octopusdeploy_projects.project_lambda_hotfixing.projects[0].id : octopusdeploy_project.project_lambda_hotfixing[0].id}"
  description   = "Hotfix channel for Lambda hotfixing"
  is_default    = false
  lifecycle_id  = "${length(data.octopusdeploy_lifecycles.lifecycle_lambda_hotfix.lifecycles) != 0 ? data.octopusdeploy_lifecycles.lifecycle_lambda_hotfix.lifecycles[0].id : octopusdeploy_lifecycle.lifecycle_lambda_hotfix[0].id}"
  space_id      = "${trimspace(var.octopus_space_id)}"
}
```

Here is an example of a channel resource with a "rule" block that applies when the release version matches the tag hotfix (using the regex ^hotfix$), and it targets specific deployment actions (steps):

```
data "octopusdeploy_projects" "project_lambda_hotfixing" {
  ids          = null
  partial_name = "Lambda Hotfixing"
  skip         = 0
  take         = 1
}

resource "octopusdeploy_channel" "channel_lambda_hotfixing_hotfix" {
  count         = "${length(data.octopusdeploy_projects.project_lambda_hotfixing.projects) != 0 ? 0 : 1}"
  name          = "Hotfix"
  project_id    = "${length(data.octopusdeploy_projects.project_lambda_hotfixing.projects) != 0 ? data.octopusdeploy_projects.project_lambda_hotfixing.projects[0].id : octopusdeploy_project.project_lambda_hotfixing[0].id}"
  description   = "Hotfix channel for Lambda hotfixing"
  is_default    = false
  lifecycle_id  = "${length(data.octopusdeploy_lifecycles.lifecycle_lambda_hotfix.lifecycles) != 0 ? data.octopusdeploy_lifecycles.lifecycle_lambda_hotfix.lifecycles[0].id : octopusdeploy_lifecycle.lifecycle_lambda_hotfix[0].id}"
  space_id      = "${trimspace(var.octopus_space_id)}"
  rule {
        action_package {
          deployment_action = "deploy-database-changes"
        }
        action_package {
          deployment_action = "deploy-rate-service"
        }
        action_package {
          deployment_action = "deploy-trading-site"
        }
        tag           = "^hotfix$"
        version_range = ""
    }
}
```

## Octopus Deployment Process Instructions

* Every "octopusdeploy_project" resource must have an associated "octopusdeploy_process" resource.
* Every "octopusdeploy_process" resource must have an associated "octopusdeploy_process_steps_order" resource.
* Every "octopusdeploy_process_steps_order" resource must have an associated "octopusdeploy_process_step" resource.
* You will be penalized for not defining steps for a project or runbook.
* Steps are defined in the "octopusdeploy_process_step" and "octopusdeploy_process_child_step" resources.
* The order of the steps are defined in the "octopusdeploy_process_steps_order" resource.
* The order of child steps are defined in the "octopusdeploy_process_child_steps_order" resource.
* The "condition" attribute on an "octopusdeploy_process_step" block must be set to one of the following:
  * "Always"
  * "Failure"
  * "Success"
  * "Variable"
* Adding a step requires a new "octopusdeploy_process_step" resource to be defined and then added to the "octopusdeploy_process_steps_order" resource in the "steps" array. For example, if this is the initial set of steps:

```
data "octopusdeploy_projects" "project_azure_web_app" {
  ids          = null
  partial_name = "My Project"
  skip         = 0
  take         = 1
}

resource "octopusdeploy_project" "project_azure_web_app" {
  count                                = "${length(data.octopusdeploy_projects.project_azure_web_app.projects) != 0 ? 0 : 1}"
  name                                 = "My Project"
  # ...
}

resource "octopusdeploy_process" "process_azure_web_app" {
  count      = "${length(data.octopusdeploy_projects.project_azure_web_app.projects) != 0 ? 0 : 1}"
  project_id = "${length(data.octopusdeploy_projects.project_azure_web_app.projects) != 0 ? data.octopusdeploy_projects.project_azure_web_app.projects[0].id : octopusdeploy_project.project_azure_web_app[0].id}"
  depends_on = []
}

resource "octopusdeploy_process_steps_order" "process_step_order_azure_web_app" {
  count      = "${length(data.octopusdeploy_projects.project_azure_web_app.projects) != 0 ? 0 : 1}"
  process_id = "${length(data.octopusdeploy_projects.project_azure_web_app.projects) != 0 ? null : octopusdeploy_process.process_azure_web_app[0].id}"
  steps      = ["${length(data.octopusdeploy_projects.project_azure_web_app.projects) != 0 ? null : octopusdeploy_process_step.process_step_azure_web_app_validate_setup[0].id}"]
}

resource "octopusdeploy_process_step" "process_step_azure_web_app_validate_setup" {
  count                 = "${length(data.octopusdeploy_projects.project_azure_web_app.projects) != 0 ? 0 : 1}"
  name                  = "Validate setup"
  # ...
}
```

Then adding a new step called "Deploy an Azure Web App (Web Deploy)" would require the following changes:

```
data "octopusdeploy_projects" "project_azure_web_app" {
  ids          = null
  partial_name = "My Project"
  skip         = 0
  take         = 1
}

resource "octopusdeploy_project" "project_azure_web_app" {
  count                                = "${length(data.octopusdeploy_projects.project_azure_web_app.projects) != 0 ? 0 : 1}"
  name                                 = "My Project"
  # ...
}

resource "octopusdeploy_process" "process_azure_web_app" {
  count      = "${length(data.octopusdeploy_projects.project_azure_web_app.projects) != 0 ? 0 : 1}"
  project_id = "${length(data.octopusdeploy_projects.project_azure_web_app.projects) != 0 ? data.octopusdeploy_projects.project_azure_web_app.projects[0].id : octopusdeploy_project.project_azure_web_app[0].id}"
  depends_on = []
}

resource "octopusdeploy_process_steps_order" "process_step_order_azure_web_app" {
  count      = "${length(data.octopusdeploy_projects.project_azure_web_app.projects) != 0 ? 0 : 1}"
  process_id = "${length(data.octopusdeploy_projects.project_azure_web_app.projects) != 0 ? null : octopusdeploy_process.process_azure_web_app[0].id}"
  # The new step is added to the steps array
  steps      = [
  "${length(data.octopusdeploy_projects.project_azure_web_app.projects) != 0 ? null : octopusdeploy_process_step.process_step_azure_web_app_validate_setup[0].id}",
  "${length(data.octopusdeploy_projects.project_azure_web_app.projects) != 0 ? null : octopusdeploy_process_step.process_step_azure_web_app_deploy_web_app[0].id}"
  ]
}

resource "octopusdeploy_process_step" "process_step_azure_web_app_validate_setup" {
  count                 = "${length(data.octopusdeploy_projects.project_azure_web_app.projects) != 0 ? 0 : 1}"
  name                  = "Validate setup"
  # ...
}

# This is the new step being added
resource "octopusdeploy_process_step" "process_step_azure_web_app_deploy_web_app" {
  count                 = "${length(data.octopusdeploy_projects.project_azure_web_app.projects) != 0 ? 0 : 1}"
  name                  = "Deploy Web App (Web Deploy)"
  # ...
}
```

* The "name" attribute in a "octopusdeploy_process_step" or "octopusdeploy_process_child_step" resource can only contain letters, numbers, periods, commas, dashes, underscores or hashes.
* The "slug" attribute in a "octopusdeploy_process_step" or "octopusdeploy_process_child_step" resource must be unique across the project.
* The "name" attribute in a "octopusdeploy_process_step" or "octopusdeploy_process_child_step" resource must be unique across the project.
* You must include all the "octopusdeploy_process_step" resources referenced in the "octopusdeploy_process_steps_order" resource "steps" array, for example:

```
data "octopusdeploy_projects" "project_my_app" {
  ids          = null
  partial_name = "My App"
  skip         = 0
  take         = 1
}

resource "octopusdeploy_process_steps_order" "process_step_order_azure_function" {
  count  = "${length(data.octopusdeploy_projects.project_my_app.projects) != 0 ? 0 : 1}"
  steps  = ["${length(data.octopusdeploy_projects.project_my_app.projects) != 0 ? null : octopusdeploy_process_step.process_step_deploy_app[0].id}"]
  # ...
}

resource "octopusdeploy_process_step" "process_step_deploy_app" {
  count  = "${length(data.octopusdeploy_projects.project_my_app.projects) != 0 ? 0 : 1}"
  # ...
}
```

* You will be penalized for defining a "octopusdeploy_process_step" or "octopusdeploy_process_child_step" resource with a duplicate "slug" attribute within the same project, for example, the following is invalid because the "slug" attribute is duplicated:

```
resource "octopusdeploy_process_step" "step1" {
    slug = "step1"
}

resource "octopusdeploy_process_step" "step2" {
    slug = "step2"
}

resource "octopusdeploy_process_step" "step3" {
    slug = "step1"
}
```

* You will be penalized for defining a "octopusdeploy_process_step" or "octopusdeploy_process_child_step" resource with a duplicate "name" attribute within the same project, for example, the following is invalid because the "name" attribute is duplicated:

```
resource "octopusdeploy_process_step" "step1" {
    name = "step1"
}

resource "octopusdeploy_process_step" "step2" {
    name = "step2"
}

resource "octopusdeploy_process_step" "step3" {
    name = "step1"
}
```

* You will be penalized for defining a "octopusdeploy_process_step" or "octopusdeploy_process_child_step" resource with a "name" attribute that contains any characters other than letters, numbers, periods, commas, dashes, underscores or hashes.
* You will be penalized for defining a "name" attribute with the characters "/" and "\".
* Target tags must only be defined in the "Octopus.Action.TargetRoles" properties on a "octopusdeploy_process_step", for example:

```
resource "octopusdeploy_process_step" "process_step_every_step_project_deploy_an_azure_web_app__web_deploy_" {
  count                 = "${length(data.octopusdeploy_projects.project_every_step_project.projects) != 0 ? 0 : 1}"
  name                  = "Deploy an Azure Web App (Web Deploy)"
  type                  = "Octopus.AzureWebApp"
  process_id            = "${length(data.octopusdeploy_projects.project_every_step_project.projects) != 0 ? null : octopusdeploy_process.process_every_step_project[0].id}"
  channels              = null
  condition             = "Success"
  environments          = null
  excluded_environments = null
  notes                 = "Note the Octopus.Action.TargetRoles key in the properties attribute which defines the target tags."
  primary_package       = { acquisition_location = "Server", feed_id = "${data.octopusdeploy_feeds.feed_octopus_server__built_in_.feeds[0].id}", id = null, package_id = "WebAppPackage", properties = { SelectionMode = "immediate" } }
  package_requirement   = "LetOctopusDecide"
  start_trigger         = "StartAfterPrevious"
  tenant_tags           = null
  properties            = {
        "Octopus.Action.TargetRoles" = "AzureWebApp"
      }
  execution_properties  = {
        "Octopus.Action.RunOnServer" = "true"
        "OctopusUseBundledTooling" = "False"
        "Octopus.Action.Azure.UseChecksum" = "False"
      }
}
```

* You will be penalized for using target tags with the format "name=value" in the "target_roles" attribute.
* You will be penalized for adding the "target_roles" attribute on an "action".
* You will be penalized for adding the "excluded_environments" attribute on a "step".
* You will be penalized for adding target tags to the "tenant_tags" attribute.
* When the "Octopus.Action.Script.ScriptSource" property is set to "Package", the "Octopus.Action.Script.Syntax" property must not be defined.
* You will be penalized for using the "Octopus.Action.Script.Syntax" property when the "Octopus.Action.Script.ScriptSource" property is set to "Package".
* When the "Octopus.Action.Script.ScriptSource" property is set to "Inline", the "primary_package" property must not be defined.
* You will be penalized for using the "primary_package" property when the "Octopus.Action.Script.ScriptSource" property is set to "Inline".
* You will be penalized for defining a script step with no script.
* Steps of type "Octopus.AzureAppService" must have at least one item in the "target_roles" attribute.
* Steps of the following types must have a "primary_package" block:
   * "Octopus.IIS"
   * "Octopus.AzureWebApp"
   * "Octopus.TentaclePackage"
   * "Octopus.WindowsService"
   * "Octopus.AwsUploadS3"
   * "Octopus.JavaArchive"
   * "Octopus.HelmChartUpgrade"
   * "Octopus.AzureAppService"
* You will be penalized for defining a "package" block in steps with the types:
   * "Octopus.IIS"
   * "Octopus.AzureWebApp"
   * "Octopus.TentaclePackage"
   * "Octopus.WindowsService"
   * "Octopus.AwsUploadS3"
   * "Octopus.JavaArchive"
   * "Octopus.HelmChartUpgrade"
   * "Octopus.AzureAppService"
* The step of type "Octopus.HelmChartUpgrade" must define a property "Octopus.Action.Helm.ClientVersion" with the value of "V3".
* You will be penalized for adding the property "Octopus.Action.Azure.AccountId" to steps of type "Octopus.AzureWebApp".
* You will be penalized for defining a "version" attribute on the "primary_package" block.
* The "start_trigger" attribute must only be defined once.
* You will be penalized for defining an empty "properties" block, for example "properties = {}".
* You will be penalized for defining a "properties_additional" block.
* You will be penalized for defining multiple "features" attributes.
* You must include the "container" nested child block if one exists for a "octopusdeploy_process_step" resource in the sample Terraform configurations.
* The "container" block is used to define the step's "Container Image".
* Instructions that reference a step's "Container Image" result in the "container" block being defined or edited.
* The "container" block has the following required properties:
    * "feed_id"
    * "image"
* For example here is an example "container" block for a "octopusdeploy_process_step":
```
{
    feed_id = "${length(data.octopusdeploy_feeds.feed_docker_hub.feeds) != 0 ? data.octopusdeploy_feeds.feed_docker_hub.feeds[0].id : octopusdeploy_docker_container_registry.feed_docker_hub[0].id}",
    image = "octopuslabs/aws-workertools"
}
```
* You will be penalized for editing the "packages" block with a prompt that includes details concerning a "Container Image".
* For example, if the prompt asks to set the "Container Image" to "octopuslabs/k8s-workertools", and the sample Terraform defines a step with a package of "nginx", you must edit the "container" block with the specific image, while leaving the "packages" blocks unmodified:
```
resource "octopusdeploy_process_step" "deploy_k8s_yaml" {
  # The prompt asks to set the Container Image to "octopuslabs/k8s-workertools"
  container = {
    feed_id = "${length(data.octopusdeploy_feeds.feed_github_container_registry.feeds) != 0 ? data.octopusdeploy_feeds.feed_github_container_registry.feeds[0].id : octopusdeploy_docker_container_registry.feed_github_container_registry[0].id}"
    image = "ghcr.io/octopusdeploylabs/k8s-workertools"
  }
  # The packages do not change, so we keep the existing package definition
  packages = {
      nginx = {
          acquisition_location = "NotAcquired"
          feed_id = "${length(data.octopusdeploy_feeds.docker.feeds) != 0 ? data.octopusdeploy_feeds.docker.feeds[0].id : octopusdeploy_docker_container_registry.docker[0].id}"
          id = null
          package_id = "nginx"
          properties = { Extract = "False", Purpose = "DockerImageReference", SelectionMode = "immediate" }
      }
  }
}
```
* You will be penalized for not including the "container" nested child block if one exists in the sample Terraform configurations.
* Steps with actions of the following types must have at least one role defined in the "target_roles" array:
   * "Octopus.AzureWebApp"
   * "Octopus.KubernetesDeployRawYaml"
* The "Octopus.Action.DeployRelease.ProjectId" property for a step of type "Octopus.DeployRelease" must reference the project ID of a project from a data "octopusdeploy_projects", for example:

```
resource "octopusdeploy_process_step" "process_step_orchestrator_project_deploy_a_release" {
  type                  = "Octopus.DeployRelease"
  execution_properties  = {
    "Octopus.Action.DeployRelease.ProjectId" = "${data.octopusdeploy_projects.project_child_project.projects[0].id}"
    ...
  }
  ...
}
```

* You will be penalized for defining a step of type "Octopus.DeployRelease" with a string like "Projects-##" for the "Octopus.Action.DeployRelease.ProjectId" execution property.
* You will be penalized for setting the "container" block on a step when the "Octopus.Action.RunOnServer" property is set to "false".
* Steps of type "Octopus.AwsRunScript" must have the "Octopus.Action.Aws.Region" execution_property defined, for example:

```
resource "octopusdeploy_process_step" "aws_script_step" {
  type                  = "Octopus.AwsRunScript"
  execution_properties  = {
    # The "Octopus.Action.Aws.Region" must be defined
    "Octopus.Action.Aws.Region" = "us-east-1"
  }
}
```

## Octopus Variable Syntax Instructions

* Octopus variable syntax must be defined as "#{<variable name>}"
* You will be penalized for using the syntax "${<variable name>}" for Octopus variables.
* You will be penalized for using the syntax "$<variable name>" for Octopus variables.

## Octopus Variable Instructions

* Variables defined as resource "octopusdeploy_variable" must have a "type" attribute set to one of the following:
  * "AmazonWebServicesAccount"
  * "AzureAccount"
  * "GoogleCloudAccount"
  * "UsernamePasswordAccount"
  * "Certificate"
  * "Sensitive"
  * "String"
  * "WorkerPool"
* You will be penalized for setting the resource "octopusdeploy_variable" "type" attribute to "Token".
* When defining the value for a resource "octopusdeploy_variable" with a "type" of "Sensitive", the "sensitive_value" attribute must be set to "CHANGEME", and the "value" attribute must not be defined.

For example, this is a sensitive variable:

```
resource "octopusdeploy_variable" "a_sensitive_variable" {
  count        = "${length(data.octopusdeploy_projects.project_my_project.projects) != 0 ? 0 : 1}"
  owner_id     = "${length(data.octopusdeploy_projects.project_my_project.projects) == 0 ?octopusdeploy_project.project_my_project[0].id : data.octopusdeploy_projects.project_azure_my_project[0].id}"
  name         = "A.Sensitive.Variable"
  type         = "Sensitive"
  is_sensitive = true
  sensitive_value = "CHANGEME"
}
```

This is an example of a regular variable:

```
resource "octopusdeploy_variable" "azure_function_project_azure_location_1" {
  count        = "${length(data.octopusdeploy_projects.project_azure_function.projects) != 0 ? 0 : 1}"
  owner_id     = "${length(data.octopusdeploy_projects.project_azure_function.projects) == 0 ?octopusdeploy_project.project_azure_function[0].id : data.octopusdeploy_projects.project_azure_function.projects[0].id}"
  value        = "canadacentral"
  name         = "Project.Azure.Location"
  type         = "String"
  is_sensitive = false
}
```

* You will be penalized for setting the "value" and "sensitive_value" attributes in the same resource "octopusdeploy_variable".
* You will be penalized for setting the "sensitive_value" attribute to anything other than "CHANGEME".
* You will be penalized for assigning an empty scope like "scope {}" to a resource "octopusdeploy_variable".
* You will be penalized for defining a "tenants" attribute in the "scope" block.
* You will be penalized for including more than one resource "octopusdeploy_variable" with the same name.
* The only valid attributes for the "scope" block are:
  * "actions"
  * "channels"
  * "environments"
  * "machines"
  * "roles"
  * "tenant_tags"

## Runbook Instructions

* The "runbook_id" attribute of resource "octopusdeploy_runbook_process" is in the format "${length(data.octopusdeploy_projects.<project>.projects) != 0 ? null : octopusdeploy_runbook.<runbook>[0].id}"

## Worker Pool Instructions

* You must include the data "octopusdeploy_worker_pools" "workerpool_default_worker_pool".

## Octopus Target Instructions

* Targets must be scoped to at least one environment
* You will be penalized for defining a target with an empty "environments" attribute.
* If a target has no environments specified, the "environments" attribute must include all environments.
* Each resource "octopusdeploy_kubernetes_cluster_deployment_target" must have an associated data "octopusdeploy_deployment_targets". For example, if the following resource is defined:

```
resource "octopusdeploy_kubernetes_cluster_deployment_target" "kubernetes_cluster_target_example" {
  count       = "${length(data.octopusdeploy_deployment_targets.kubernetes_cluster_target_example.deployment_targets) != 0 ? 0 : 1}"
  name        = "Kubernetes Target"
}
```

Then the associated data resource must be defined as follows:

```
data "octopusdeploy_deployment_targets" "kubernetes_cluster_target_example" {
  partial_name         = "Kubernetes Target"
  skip                 = 0
  take                 = 1
}
```

## Octopus Account Instructions

* You must set the "token" attribute on a "octopusdeploy_token_account" resource to "CHANGEME".

## Terraform Instructions

* Resource names must be unique per type.
* Data names must be unique per type.
* You will be penalized for defining resources or adding attributes that are not included in the sample Terraform configurations.
* Every resource must have a "count" attribute.
* Each "count" attribute must be defined in the format "${length(data.<data type>.<data resource>.<collection>) != 0 ? 0 : 1}".
* You will be penalized for defining a "count" attribute with the value of "1".
* You will be penalized for using heredoc syntax.
* You must only respond with the Terraform configuration.
* A block starting with "{" and ending with "}" must write each child property on a new line.
* You will be penalized for writing a single line block like this: "lifecycle { ignore_changes = [sensitive_value] prevent_destroy = true }".
* You will be penalized for writing a block starting with "{" and ending with "}" on a single line.
* You must use the password "CHANGEME" for all passwords and secret keys.
* You must use username "CHANGEME" for all usernames.
* You must only create the following types of steps:
  * "Octopus.Script" - Run a Script step
  * "Octopus.AzurePowerShell" - Run an Azure Script step
  * "Octopus.AwsRunScript" - Run an AWS CLI Script step
  * "Octopus.GoogleCloudScripting" - Run gcloud in a Script step
  * "Octopus.AzureResourceGroup" - Deploy an Azure Resource Manager template step
  * "Octopus.KubernetesRunScript" - Run a kubectl script step
  * "Octopus.IIS" - Deploy to IIS step
  * "Octopus.TentaclePackage" - Deploy a Package step
  * "Octopus.WindowsService" - Deploy a Windows Service step
  * "Octopus.AzureWebApp" - Deploy an Azure Web App (Web Deploy) step
  * "Octopus.AwsUploadS3" - Upload a package to an AWS S3 bucket step
  * "Octopus.JavaArchive" - Deploy Java Archive step
  * "Octopus.HelmChartUpgrade" - Deploy a Helm Chart step
  * "Octopus.KubernetesDeployRawYaml" - Deploy Kubernetes YAML step
  * "Octopus.Kubernetes.Kustomize" - Deploy with Kustomize step
  * "Octopus.TerraformApply" - Apply a Terraform template step
  * "Octopus.TerraformDestroy" - Destroy Terraform resources step
  * "Octopus.TerraformPlan" - Plan to apply a Terraform template step
  * "Octopus.TerraformPlanDestroy" - Plan a Terraform destroy step
  * "Octopus.AwsRunCloudFormation" - Deploy an AWS CloudFormation template step
  * "Octopus.AwsApplyCloudFormationChangeSet" - Apply an AWS CloudFormation Change Set step
  * "Octopus.AwsDeleteCloudFormation" - Delete an AWS CloudFormation stack step
* The "octopusdeploy" provider must set the "space_id" attribute to the value "trimspace(var.octopus_space_id)".
* The Terraform variable "octopus_space_id" must be included.
* Terraform string interpolation must be implemented as "${}".
* You will be penalized for using two curly brackets for string interpolation like "${{}}".
* Dollar signs in script steps must be escaped with a second dollar sign like "$$".
* Percent signs in script steps must be escaped with a second percent sign like "%%", for example:

```
"Octopus.Action.Script.ScriptBody" = "curl -w \"%%{http_code}\" http://example.org"
```

* Script steps that reference variables like "${VARIABLE}" must escape the dollar sign like "$${VARIABLE}", for example:

```
"Octopus.Action.Script.ScriptBody" = "echo $${VARIABLE}"
```

## Penalties

* You will be penalized for generating invalid Terraform.
* You will be penalized for setting the "space_id" attribute in the "octopusdeploy" provider to a value like "Spaces-1".
* You will be penalized if you include any markdown.
* You will be penalized for including any code blocks.
* You will be penalized for including any instructions.
* You will be penalized for returning any other text.
* You will be penalized for including any comments.
* You will be penalized for duplicating resource names for a resource type, for example, the following terraform is invalid because the resource name "step1" for resource type "octopusdeploy_process_step" is duplicated:

```
resource "octopusdeploy_process_step" "step1" { ... }
resource "octopusdeploy_process_step" "step2" { ... }
resource "octopusdeploy_process_step" "step1" { ... }
```

* You will be penalized for duplicating data names for a data type, for example, the following terraform is invalid because the data name "project1" for data type "octopusdeploy_projects" is duplicated:

```
data "octopusdeploy_projects" "project1" { ... }
data "octopusdeploy_projects" "project2" { ... }
data "octopusdeploy_projects" "project1" { ... }
```

* You will be penalized for not including all required resources and data blocks.