step "deploy-with-cli" {
    name = "Deploy to Consumption Function"

    action {
        action_type = "Octopus.AzurePowerShell"
        environments = ["production"]
        notes = "Deploy the application using the Azure Functions CLI"
        properties = {
            Octopus.Action.AutoRetry.MaximumCount = "3"
            Octopus.Action.Azure.AccountId = "#{Octopus.Azure.Account}"
            Octopus.Action.Script.ScriptBody = <<-EOT
                pushd Azure.Functions.Cli.linux-x64
                chmod +x func
                chmod +x gozip
                popd
                
                # Grant access to this dynamic worker
                WORKERIP=$(curl --silent ifconfig.net/)
                
                
                # Clear any existing rule
                EXISTING=$(az functionapp config access-restriction show -g "#{Azure.ResourceGroup.Name}" -n "#{Azure.Function.Name}" | jq -r '[.ipSecurityRestrictions[] | select(.name=="dynamicworker")] | length')
                if [[ $EXISTING -eq "1" ]]
                then
                  az functionapp config access-restriction remove -g "#{Azure.ResourceGroup.Name}" -n "#{Azure.Function.Name}" --rule-name "dynamicworker"
                fi
                
                EXISTING=$(az functionapp config access-restriction show -g "#{Azure.ResourceGroup.Name}" -n "#{Azure.Function.Name}" --slot "staging" | jq -r '[.ipSecurityRestrictions[] | select(.name=="dynamicworker")] | length')
                if [[ $EXISTING -eq "1" ]]
                then
                  az functionapp config access-restriction remove -g "#{Azure.ResourceGroup.Name}" -n "#{Azure.Function.Name}" --rule-name "dynamicworker" --slot "staging"
                fi
                
                # Allow this worker access
                az functionapp config access-restriction add -g "#{Azure.ResourceGroup.Name}" -n "#{Azure.Function.Name}" --rule-name "dynamicworker" --action Allow --ip-address ${WORKERIP} --priority 500
                az functionapp config access-restriction add -g "#{Azure.ResourceGroup.Name}" -n "#{Azure.Function.Name}" --rule-name "dynamicworker" --action Allow --ip-address ${WORKERIP} --priority 500 --slot "staging"
                
                
                # Disable autoswap
                az functionapp deployment slot auto-swap \
                	-g "#{Azure.ResourceGroup.Name}" \
                    -n "#{Azure.Function.Name}" \
                    --slot staging \
                    --disable
                
                
                # See https://stackoverflow.com/a/74619020/157605 for why WEBSITE_OVERRIDE_STICKY_DIAGNOSTICS_SETTINGS
                # is set to "0"
                
                cat >appsettings.json <<EOL
                [
                	{
                      "name": "WEBSITE_OVERRIDE_STICKY_DIAGNOSTICS_SETTINGS",
                      "value": "0",
                      "slotSetting": false
                   },
                   {
                      "name": "OPENAI_API_KEY",
                      "value": "#{Azure.US.OpenAI.Key}",
                      "slotSetting": false
                   },
                   {
                      "name": "OPENAI_ENDPOINT",
                      "value": "#{Azure.US.OpenAI.Endpoint}",
                      "slotSetting": false
                   },
                   {
                      "name": "OPENAI_API_DEPLOYMENT",
                      "value": "#{Azure.US.OpenAI.Deployment}",
                      "slotSetting": false
                   },
                   {
                      "name": "OPENAI_API_DEPLOYMENT_FUNCTIONS",
                      "value": "#{Azure.US.OpenAI.Deployment.Functions}",
                      "slotSetting": false
                   },
                   {
                      "name": "OPENAI_API_DEPLOYMENT_QUERY",
                      "value": "#{Azure.US.OpenAI.Deployment.Query}",
                      "slotSetting": false
                   },
                   {
                     "name": "AISERVICES_ENDPOINT",
                     "value": "#{Azure.US.AIServices.Endpoint}",
                     "slotSetting": false
                   },
                   {
                     "name": "AISERVICES_KEY",
                     "value": "#{Azure.US.AIServices.Key}",
                     "slotSetting": false
                   },
                   {
                     "name": "AISERVICES_DEPLOYMENT",
                     "value": "#{Azure.US.AIServices.Deployment}",
                     "slotSetting": false
                   },
                   {
                     "name": "AISERVICES_DEPLOYMENT_FUNCTIONS",
                     "value": "#{Azure.US.AIServices.Deployment.Functions}",
                     "slotSetting": false
                   },
                   {
                      "name": "APPLICATION_USERS_ADMIN",
                      "value": "#{Application.Users.Admin}",
                      "slotSetting": false
                   },
                   {
                      "name": "APPLICATION_SERVERS_ADMIN",
                      "value": "#{Application.Servers.Admin | JsonEscape}",
                      "slotSetting": false
                   },
                   {
                      "name": "SLACK_WEBHOOK_URL",
                      "value": "#{Slack.Webhook.Url}",
                      "slotSetting": false
                   },
                   {
                      "name": "ENCRYPTION_SALT",
                      "value": "#{Encryption.Salt}",
                      "slotSetting": false
                   },
                   {
                      "name": "ENCRYPTION_PASSWORD",
                      "value": "#{Encryption.Password}",
                      "slotSetting": false
                   },
                   {
                      "name": "GITHUB_CLIENT_ID",
                      "value": "#{GitHub.App.ClientId}",
                      "slotSetting": false
                   },
                   {
                      "name": "GITHUB_CLIENT_REDIRECT",
                      "value": "#{GitHub.Oauth.Redirect}",
                      "slotSetting": false
                   },
                   {
                      "name": "GITHUB_CLIENT_SECRET",
                      "value": "#{GitHub.App.ClientSecret}",
                      "slotSetting": false
                   },
                   {
                      "name": "APPLICATION_OCTOTERRA_URL",
                      "value": "#{Application.Octoterra.Url}",
                      "slotSetting": false
                   },
                   {
                      "name": "ZENDESK_EMAIL",
                      "value": "#{ZenDesk.Api.Email}",
                      "slotSetting": false
                   },
                   {
                      "name": "ZENDESK_TOKEN",
                      "value": "#{ZenDesk.Api.Token}",
                      "slotSetting": false
                   },
                   {
                      "name": "SLACK_CLIENT_ID",
                      "value": "#{Slack.App.ClientID}",
                      "slotSetting": false
                   },
                   {
                      "name": "SLACK_CLIENT_SECRET",
                      "value": "#{Slack.App.ClientSecret}",
                      "slotSetting": false
                   },
                   {
                      "name": "SLACK_CLIENT_REDIRECT",
                      "value": "#{Slack.App.Redirect}",
                      "slotSetting": false
                   },
                   {
                      "name": "STORYBLOK_TOKEN",
                      "value": "#{Storyblok.Api.Token}",
                      "slotSetting": false
                   },
                   {
                      "name": "OCTOPUS_GHU_APIKEY",
                      "value": "#{Octopus.Guest.ApiKey}",
                      "slotSetting": false
                   },
                   {
                      "name": "APPLICATION_OCTOLINT_URL",
                      "value": "#{Octolint.Application.Url}",
                      "slotSetting": false
                   },
                   {
                      "name": "REDIRECTION_SERVICE_APIKEY",
                      "value": "#{Redirection.Service.ApiKey}",
                      "slotSetting": false
                   },
                   {
                      "name": "REDIRECTION_HOST",
                      "value": "#{Redirection.Host}",
                      "slotSetting": false
                   },
                   {
                     "name": "GITHUB_APP_PRIVATEKEY",
                     "value": "#{GitHub.App.PrivateKey | ToBase64}",
                     "slotSetting": false
                   },
                   {
                     "name": "APPLICATION_SPACEBUILDER_URL",
                     "value": "#{Application.SpaceBuilder.Url}",
                     "slotSetting": false
                   }
                   
                ] 
                EOL
                
                az functionapp config appsettings set -g "#{Azure.ResourceGroup.Name}" -n "#{Azure.Function.Name}" --settings @appsettings.json 2>&1
                
                cd OctopusCopilot
                ../Azure.Functions.Cli.linux-x64/func azure functionapp publish "#{Azure.Function.Name}" --python --slot staging
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "Bash"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "hosted-ubuntu"

        container {
            feed = "ghcr"
            image = "ghcr.io/octopusdeploylabs/azure-workertools"
        }

        packages "Azure.Functions.Cli.linux-x64" {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = "Azure.Functions.Cli.linux-x64"
            properties = {
                Extract = "True"
                Purpose = ""
                SelectionMode = "immediate"
            }
        }

        packages "OctopusCopilot" {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = "OctopusCopilot"
            properties = {
                Extract = "True"
                Purpose = ""
                SelectionMode = "immediate"
            }
        }
    }
}

step "smoke-test-health-endpoint" {
    name = "Smoke Test Health Staging Endpoint"

    action {
        environments = ["production"]
        properties = {
            ExpectedCode = "200"
            Octopus.Action.Template.Id = "ActionTemplates-1741"
            Octopus.Action.Template.Version = "18"
            SecurityProtocol = "Tls12"
            TimeoutSeconds = "60"
            Uri = "#{Application.Staging.HealthCheck}"
            UseWindowsAuth = "False"
        }
        worker_pool = "hosted-ubuntu"
    }
}

step "run-an-azure-script" {
    name = "Slot Swap"

    action {
        action_type = "Octopus.AzurePowerShell"
        environments = ["production"]
        properties = {
            Octopus.Action.AutoRetry.MaximumCount = "3"
            Octopus.Action.Azure.AccountId = "#{Octopus.Azure.Account}"
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptBody = <<-EOT
                az webapp deployment slot swap \
                	-g "#{Azure.ResourceGroup.Name}" \
                    -n "#{Azure.Function.Name}" \
                    --slot staging \
                    --target-slot production
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "Bash"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = ""

        container {
            feed = "ghcr"
            image = "ghcr.io/octopusdeploylabs/azure-workertools"
        }
    }
}

step "smoke-test-health-production-endpoint" {
    name = "Smoke Test Health Production Endpoint"

    action {
        environments = ["production"]
        properties = {
            ExpectedCode = "200"
            Octopus.Action.AutoRetry.MaximumCount = "3"
            Octopus.Action.AutoRetry.MinimumBackoff = "15"
            Octopus.Action.Template.Id = "ActionTemplates-1741"
            Octopus.Action.Template.Version = "18"
            SecurityProtocol = "Tls12"
            TimeoutSeconds = "60"
            Uri = "#{Application.Production.HealthCheck}"
            UseWindowsAuth = "False"
        }
        worker_pool = "hosted-ubuntu"
    }
}

step "security-scan" {
    name = "Scan for Security Vulnerabilities"

    action {
        properties = {
            Octopus.Action.AutoRetry.MaximumCount = "3"
            Octopus.Action.Template.Id = "ActionTemplates-4361"
            Octopus.Action.Template.Version = "0"
        }
        worker_pool = "hosted-ubuntu"
    }
}

step "remove-worker-access" {
    condition = "Always"
    name = "Remove worker access"

    action {
        environments = ["production"]
        notes = "Deploy the application using the Azure Functions CLI"
        properties = {
            Octopus.Action.AutoRetry.MaximumCount = "3"
            Octopus.Action.Template.Id = "ActionTemplates-4322"
            Octopus.Action.Template.Version = "0"
        }
        worker_pool = "hosted-ubuntu"

        container {
            feed = "ghcr"
            image = "ghcr.io/octopusdeploylabs/azure-workertools"
        }
    }
}

step "octopus-prompt-ai" {
    name = "Octopus - Prompt AI"

    action {
        environments = ["production"]
        properties = {
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Template.Id = "ActionTemplates-4021"
            Octopus.Action.Template.Version = "1"
            OctopusAI.GitHub.Token = "#{GitHub.Token}"
            OctopusAI.Octopus.APIKey = "#{Octopus.ApiKey}"
            OctopusAI.Octopus.Url = "#{Octopus.Web.ServerUri}"
            OctopusAI.Prompt = "Given deployment \"#{Octopus.Release.Number}\" for project \"#{Octopus.Project.Name}\" to environment \"#{Octopus.Environment.Name}\" in space \"#{Octopus.Space.Name}\", list the git committers and a summary of the changes in the git diffs."
        }
        worker_pool_variable = ""
    }
}

step "collect-summary" {
    name = "Collect Summary"

    action {
        action_type = "Octopus.Script"
        properties = {
            Octopus.Action.Script.ScriptBody = <<-EOT
                Set-Content -Path summary.md -Value $OctopusParameters["Octopus.Action[Octopus - Prompt AI].Output.AIResult"]
                
                New-OctopusArtifact "summary.md"
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool = "hosted-ubuntu"
    }
}

step "convert-to-slack-markdown" {
    name = "Convert to Slack Markdown"

    action {
        action_type = "Octopus.Script"
        properties = {
            Octopus.Action.Script.ScriptBody = <<-EOT
                from slackstyler import SlackStyler
                
                # Create a styler instance
                styler = SlackStyler()
                
                markdown_text = get_octopusvariable("Octopus.Action[Octopus - Prompt AI].Output.AIResult")
                slack_message = styler.convert(markdown_text)
                set_octopusvariable("AIResult", slack_message)
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "Python"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "hosted-ubuntu"

        container {
            dockerfile = <<-EOT
                    FROM ghcr.io/octopusdeploylabs/python-workertools
                    RUN pip install slackstyler
                    EOT
        }
    }
}

step "slack-send-simple-notification-bash" {
    name = "Slack - Send Simple Notification - Bash"

    action {
        environments = ["production"]
        properties = {
            Octopus.Action.Template.Id = "ActionTemplates-4022"
            Octopus.Action.Template.Version = "2"
            ssn_Channel = "feed-octopus-copilot-releases"
            ssn_Color = "good"
            ssn_HookUrl = "#{Slack.WebHook}"
            ssn_IconUrl = "https://octopus.com/content/resources/favicon.png"
            ssn_Message = "#{Octopus.Action[Convert to Slack Markdown].Output.AIResult | JsonEscape}"
            ssn_Title = "Copilot Function Deployed"
            ssn_Username = "Octopus Deploy"
        }
        worker_pool = "hosted-ubuntu"
    }
}