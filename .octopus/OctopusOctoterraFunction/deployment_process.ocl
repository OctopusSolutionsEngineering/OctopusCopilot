step "deploy-with-cli" {
    name = "Deploy with CLI"

    action {
        environments = ["production"]
        notes = "Deploy the application using the Azure Functions CLI"
        properties = {
            Octopus.Action.Template.Id = "ActionTemplates-4321"
            Octopus.Action.Template.Version = "6"
            Packages.FunctionApp = "{\"PackageId\":\"octoterra_azure\",\"FeedId\":\"octopus-server-built-in\"}"
        }
        worker_pool = "hosted-ubuntu"

        container {
            feed = "docker-hub"
            image = "octopuslabs/azure-workertools"
        }

        packages "Packages.FunctionApp" {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = "octoterra_azure"
            properties = {
                Extract = "True"
                PackageParameterName = "Packages.FunctionApp"
                Purpose = ""
                SelectionMode = "deferred"
            }
        }
    }
}

step "http-test-url" {
    name = "HTTP - Test URL"

    action {
        properties = {
            ExpectedCode = "200"
            Octopus.Action.Template.Id = "ActionTemplates-1741"
            Octopus.Action.Template.Version = "18"
            TimeoutSeconds = "60"
            Uri = "#{Application.Production.HealthCheck}"
            UseWindowsAuth = "False"
        }
        worker_pool = "hosted-ubuntu"
    }
}

step "security-scan" {
    name = "Security Scan"

    action {
        action_type = "Octopus.Script"
        properties = {
            Octopus.Action.Script.ScriptBody = <<-EOT
                echo "Pulling Trivy Docker Image"
                echo "##octopus[stdout-verbose]"
                docker pull aquasec/trivy
                echo "##octopus[stdout-default]"
                
                TIMESTAMP=$(date +%s%3N)
                SUCCESS=0
                for x in $(find . -name bom.json -type f -print); do
                    echo "Scanning ${x}"
                
                    # Delete any existing report file
                    if [[ -f "$PWD/depscan-bom.json" ]]; then
                      rm "$PWD/depscan-bom.json"
                    fi
                
                    # Generate the report, capturing the output, and ensuring $? is set to the exit code
                    OUTPUT=$(bash -c "docker run --rm -v \"$PWD/${x}:/app/${x}\" aquasec/trivy sbom \"/app/${x}\"; exit \$?" 2>&1)
                
                    # Success is set to 1 if the exit code is not zero
                    if [[ $? -ne 0 ]]; then
                        SUCCESS=1
                    fi
                
                    # Print the output stripped of ANSI colour codes
                    echo -e "${OUTPUT}" | sed 's/\x1b\[[0-9;]*m//g'
                done
                
                # Cleanup
                for i in {1..10}
                do
                    chmod -R +rw bundle &> /dev/null
                    rm -rf bundle &> /dev/null
                    if [[ $? == 0 ]]; then break; fi
                    echo "Attempting to clean up files"
                    sleep 1
                done
                
                set_octopusvariable "VerificationResult" $SUCCESS
                
                if [[ $SUCCESS -ne 0 ]]; then
                  >&2 echo "Critical vulnerabilities were detected"
                fi
                
                exit 0
                
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "Bash"
        }
        worker_pool = "hosted-ubuntu"

        packages "octoterra_azure" {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = "octoterra_azure"
            properties = {
                Extract = "True"
                Purpose = ""
                SelectionMode = "immediate"
            }
        }
    }
}

step "remove-worker-access" {
    condition = "Always"
    name = "Remove worker access"

    action {
        action_type = "Octopus.AzurePowerShell"
        environments = ["production"]
        notes = "Removes the dynamic worker's IP from the function's firewall"
        properties = {
            Octopus.Action.Azure.AccountId = "#{Octopus.Azure.Account}"
            Octopus.Action.Script.ScriptBody = <<-EOT
                # Clear any existing rule
                EXISTING=$(az functionapp config access-restriction show -g "#{Azure.ResourceGroup.Name}" -n "#{Azure.Function.Name}" | jq -r '[.ipSecurityRestrictions[] | select(.name=="dynamicworker")] | length')
                if [[ $EXISTING -eq "1" ]]
                then
                  az functionapp config access-restriction remove -g "#{Azure.ResourceGroup.Name}" -n "#{Azure.Function.Name}" --rule-name "dynamicworker"
                fi
                
                EXISTING=$(az functionapp config access-restriction show -g "#{Azure.ResourceGroup.Name}" -n "#{Azure.Function.Name}" --slot "staging" | jq -r '[.ipSecurityRestrictions[] | select(.name=="dynamicworker")] | length')
                if [[ $EXISTING -eq "1" ]]
                then
                  az functionapp config access-restriction remove -g "#{Azure.ResourceGroup.Name}" -n "#{Azure.Function.Name}" --rule-name "dynamicworker" --slot "staging"
                fi
                
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "Bash"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "hosted-ubuntu"

        container {
            feed = "docker-hub"
            image = "octopuslabs/azure-workertools"
        }
    }
}

process_template "predeploy-hook" {
    name = "PreDeploy hook"
    process_template_slug = "project-predeploy-hook"
    version_mask = "1.X"

    parameter "Octopus.WorkerPool" {
        value = "WorkerPools-2688"
    }
}